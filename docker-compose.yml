version: "3.9"

networks:
  mvp-config-driven-net:
    name: ${NETWORK_NAME:-mvp-config-driven-net}
    driver: bridge

services:
  # MinIO - Simulador de Azure Data Lake Storage Gen2
  minio:
    image: minio/minio:RELEASE.2024-09-13T20-26-02Z
    container_name: mvp-config-driven-minio-1
    command: server /data --console-address ":${MINIO_CONSOLE_PORT:-9001}" --address ":${MINIO_API_PORT:-9000}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio12345}
      TZ: ${TZ:-America/Bogota}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio-data:/data
    networks: [mvp-config-driven-net]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # SQL Server - Simulador de Azure SQL Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: mvp-config-driven-sqlserver-1
    hostname: sqlserver
    restart: unless-stopped
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong!Passw0rd
      - MSSQL_PID=Developer
      - MSSQL_TCP_PORT=1433
      - TZ=${TZ:-America/Bogota}
    volumes:
      - sqlserver-data:/var/opt/mssql
      - ./docker/sql/init:/docker-entrypoint-initdb.d
    networks: [mvp-config-driven-net]
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Zookeeper - Requerido para Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: mvp-config-driven-zookeeper-1
    hostname: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      TZ: ${TZ:-America/Bogota}
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks: [mvp-config-driven-net]

  # Kafka - Simulador de Azure Event Hubs
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: mvp-config-driven-kafka-1
    hostname: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      TZ: ${TZ:-America/Bogota}
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks: [mvp-config-driven-net]
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI - Interfaz web para gestionar Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: mvp-config-driven-kafka-ui-1
    hostname: kafka-ui
    restart: unless-stopped
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      TZ: ${TZ:-America/Bogota}
    networks: [mvp-config-driven-net]

  # Redis - Para caché y estado de sesión
  redis:
    image: redis:7-alpine
    container_name: mvp-config-driven-redis-1
    hostname: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      TZ: ${TZ:-America/Bogota}
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass redispassword
    networks: [mvp-config-driven-net]
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Spark Master - Para procesamiento distribuido
  spark-master:
    image: bitnami/spark:3.5.1
    container_name: mvp-config-driven-spark-master-1
    environment:
      SPARK_MODE: master
      SPARK_NO_DAEMONIZE: "yes"
      JAVA_TOOL_OPTIONS: ${JAVA_TOOL_OPTIONS}
      TZ: ${TZ:-America/Bogota}
    ports:
      - "7077:7077"
      - "4040:4040"
      - "8081:8080"  # Spark Master Web UI
    volumes:
      - spark-master-data:/opt/bitnami/spark/data
      - ./src:/opt/spark-apps
      - ./data:/opt/spark-data
    networks: [mvp-config-driven-net]

  # Spark Worker
  spark-worker-1:
    image: bitnami/spark:3.5.1
    container_name: mvp-config-driven-spark-worker-1
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 2G
      SPARK_WORKER_CORES: 2
      JAVA_TOOL_OPTIONS: ${JAVA_TOOL_OPTIONS}
      TZ: ${TZ:-America/Bogota}
    ports:
      - "8082:8081"  # Spark Worker Web UI
    volumes:
      - spark-worker-data:/opt/bitnami/spark/data
      - ./src:/opt/spark-apps
      - ./data:/opt/spark-data
    depends_on: [spark-master]
    networks: [mvp-config-driven-net]

  # Jupyter Notebook - Para desarrollo y análisis
  jupyter:
    image: jupyter/pyspark-notebook:latest
    container_name: mvp-config-driven-jupyter-1
    hostname: jupyter
    restart: unless-stopped
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=jupyter123
      - SPARK_MASTER=spark://spark-master:7077
      - TZ=${TZ:-America/Bogota}
    volumes:
      - jupyter-data:/home/jovyan/work
      - ./src:/home/jovyan/work/src
      - ./data:/home/jovyan/work/data
      - ./notebooks:/home/jovyan/work/notebooks
    networks: [mvp-config-driven-net]

  # Grafana - Para monitoreo y dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: mvp-config-driven-grafana-1
    hostname: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - TZ=${TZ:-America/Bogota}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks: [mvp-config-driven-net]

  # Prometheus - Para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: mvp-config-driven-prometheus-1
    hostname: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    environment:
      - TZ=${TZ:-America/Bogota}
    volumes:
      - prometheus-data:/prometheus
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks: [mvp-config-driven-net]

  # Runner - Ejecutor de pipelines
  runner:
    image: bitnami/spark:3.5.1
    container_name: mvp-config-driven-runner-1
    working_dir: /mvp
    command: ["bash", "-lc", "/mvp/scripts/runner.sh"]
    environment:
      - PYSPARK_PYTHON=/opt/bitnami/python/bin/python3
      - PYSPARK_DRIVER_PYTHON=/opt/bitnami/python/bin/python3
      - JAVA_TOOL_OPTIONS=-Duser.home=/tmp -Divy.home=/tmp/.ivy2 -Duser.name=spark
      # Credenciales S3A -> MinIO
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio12345
      - AWS_REGION=us-east-1
      # Spark-Hadoop S3A
      - SPARK_DIST_CLASSPATH=/opt/bitnami/spark/jars/*
      - TZ=${TZ:-America/Bogota}
    volumes:
      - ./:/mvp
    depends_on:
      - spark-master
      - spark-worker-1
      - minio
      - sqlserver
      - kafka
    networks: [mvp-config-driven-net]

volumes:
  minio-data:
  sqlserver-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  redis-data:
  spark-master-data:
  spark-worker-data:
  jupyter-data:
  grafana-data:
  prometheus-data:
