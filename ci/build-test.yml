name: Build & Test

on:
  push:
    branches:
      - feature/main-codex
  pull_request:
    branches:
      - feature/main-codex

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Enforce absence of legacy artifacts
        run: python tools/audit_cleanup.py --check

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build

      - name: Build wheel
        run: python -m build

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: mvp-config-driven-${{ matrix.python-version }}-wheel
          path: dist/*.whl

      - name: Run tests with coverage
        env:
          PYTHONPATH: src
        run: pytest --cov=src/datacore --cov-report=term-missing

  smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Run smoke suite
        env:
          PYTHONPATH: src
        run: |
          set -o pipefail
          bash scripts/smoke_layers.sh 2>&1 | tee smoke.log

      - name: Upload smoke logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-logs
          path: smoke.log

  smoke-prod:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Validate production configs (forced dry-run)
        env:
          PYTHONPATH: src
        run: |
          set -o pipefail
          bash scripts/smoke_prod_configs.sh 2>&1 | tee smoke-prod.log

      - name: Upload production smoke logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-prod-logs
          path: smoke-prod.log

  validate-configs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Lint duplicated HTTP auth headers
        run: |
          set -euo pipefail
          python - <<'PY'
import subprocess
import sys
from pathlib import Path
from typing import Mapping

import yaml

root = Path("cfg")
if not root.exists():
    sys.exit(0)

result = subprocess.run(
    ["rg", "--files-with-matches", "io\\.source\\.auth", str(root)],
    check=False,
    text=True,
    capture_output=True,
)
offenders: list[Path] = []
for line in result.stdout.splitlines():
    path = Path(line.strip())
    if not path.exists():
        continue
    with path.open("r", encoding="utf-8") as handle:
        documents = [doc for doc in yaml.safe_load_all(handle) if isinstance(doc, Mapping)]
    for doc in documents:
        source = ((doc.get("io") or {}).get("source") or {})
        if not isinstance(source, Mapping) or "auth" not in source:
            continue
        headers = source.get("headers") or {}
        if isinstance(headers, Mapping) and "Authorization" in headers:
            offenders.append(path)
            break

if offenders:
    print("[auth-lint] Found duplicated Authorization headers alongside auth block:", file=sys.stderr)
    for path in offenders:
        print(f"  - {path}", file=sys.stderr)
        subprocess.run(["rg", "-n", "Authorization", str(path)], check=False)
    sys.exit(1)
PY

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install CLI dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Validate all configs
        run: |
          set -euo pipefail
          find cfg -type f -name "*.yml" -print0 | xargs -0 -I{} prodi validate -c "{}"

  smoke-finance:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Run finance pipeline smoke (dry-run)
        env:
          PYTHONPATH: src
          PRODI_FORCE_DRY_RUN: "1"
        run: |
          set -euo pipefail
          : > smoke-finance.log
          for source in http jdbc; do
            echo "[smoke-finance] Running RAW_SOURCE=${source}" | tee -a smoke-finance.log
            PRODI_FORCE_DRY_RUN=1 prodi run-pipeline -p cfg/pipelines/finance_transactions.yml --vars RAW_SOURCE="${source}" 2>&1 | tee -a smoke-finance.log
          done

      - name: Upload finance smoke logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-finance-log
          path: smoke-finance.log
