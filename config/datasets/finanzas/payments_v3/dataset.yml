# Dataset de ejemplo: payments_v3
# Organización: este archivo, junto con schema.yml y transforms.yml,
# vive en la carpeta dedicada config/datasets/finanzas/payments_v3/.
#
# Uso: el roadmap traslada este dataset a los planes generados por `prodi plan/run`.
#   Mientras tanto puede ejercitarse con `cfg/raw/example.yml` en modo `dry_run`.

id: payments_v3
description: "Pagos - versión v3. Estructura organizada en carpeta dedicada."

sources:
  - type: file
    input_format: csv
    path: s3://raw/payments/*/*/*/*.csv
    options:
      header: "true"
      inferSchema: "true"
      sep: ","
      encoding: "UTF-8"
  - type: jdbc
    jdbc:
      url: jdbc:postgresql://postgres:5432/data_warehouse
      table: finanzas.payments
      user: postgres
      password: postgres123
      driver: org.postgresql.Driver

# Estandarización básica previa a particionado, calidad y escritura
standardization:
  timezone: America/Bogota
  casts:
    - { column: amount, to: "decimal(18,2)", on_error: null }
    - { column: payment_date, to: timestamp, format_hint: "yyyy-MM-dd[ HH:mm:ss]", on_error: null }
  defaults:
    - { column: currency, value: "USD" }
    - { column: customer_id, value: "CUST-DB" }
    - { column: status, value: "completed" }
    - { column: method, value: "card" }
  deduplicate:
    key: [payment_id, customer_id]
    order_by: [payment_date desc]

# Proyección explícita de columnas útiles
select_columns:
  - payment_id
  - customer_id
  - amount
  - currency
  - payment_date
  - status
  - method
  - quantity

# Referencia de schema (ahora en YAML) y modo de aplicación
schema:
  ref: config/datasets/finanzas/payments_v3/schema.yml
  mode: permissive  # strict|permissive: en permissive crea columnas requeridas faltantes como NULL

# Transformaciones declarativas (SQL y UDFs) aplicadas en Silver
transforms_ref: config/datasets/finanzas/payments_v3/transforms.yml

quality:
  expectations_ref: config/datasets/finanzas/payments_v3/expectations.yml
  quarantine: s3://raw/quarantine/payments_v3/

# Capas de salida
output:
  silver:
    format: parquet
    path:  s3://silver/payments_v3/
    partition_by: ["year", "month"]
    partition_from: payment_date
    merge_schema: true
    mode: overwrite_dynamic
    compression: snappy
  gold:
    enabled: false
    database_config: "config/database.yml"
    environment: development
    write_mode: append
    upsert_keys: [payment_id, customer_id]
    exclude_columns: ["_run_id", "_ingestion_ts"]
    add_columns:
      - { name: "data_source", value: "payments_v3", type: "string" }
      - { name: "processed_at", value: "current_timestamp()", type: "timestamp" }
    business_rules:
      - { condition: "amount > 0", action: "filter" }
      - { condition: "currency IS NOT NULL", action: "filter" }

# Formato alineado con payments_v1/dataset.yml para consistencia